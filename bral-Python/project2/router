#!/usr/bin/env python

import argparse, socket, time, json, select, struct, math, copy

DEBUG = True
#DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################
class IPAddress:
    pass

#class FTEntry:
#
#    def __init__(self, dest, sock):




class Router:

    routes = None
    updates = None
    relations = None
    sockets = None
    fwd_table = None

    def __init__(self, networks):
        self.routes = {}
        self.updates = {} # save update annoucements as { src : annoucement_msg }
        self.relations = {} # {"192.168.0.2" : "peer"}
        self.sockets = {} #socket.socket() for "192.168.0.2"
        self.fwd_table = [] #

        for relationship in networks:
            #Ex: 192.168.0.2-peer
            network, relation = relationship.split("-") #network = "192.168.0.2", relation = "peer"
            if DEBUG: 
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)

            self.relations[network] = relation

        return


    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # perform DFS for the router at IP address == daddr
        #
        # return list of lists representing possible paths
        outroutes = []

        for k in self.relations.keys():
            if daddr == k:
                return [k]
            else:
                outroutes.append(self.lookup_helper(daddr, k))

        return outroutes

#    def lookup_helper(self, daddr, seen):


    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes
            
    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes
         
    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []

        if routes['selfOrigin'] == "True":
            outroutes.append(routes)

        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = self.lookup_routes(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
	#if packet["dst"] in self.fwd_table
	print(srcif)
        self.sockets[srcif].send(json.dumps(packet))
        print("sent")
	return
            
        return False

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        self.updates[packet["src"]] = packet	

        self.fwd_table.append({"network": packet["msg"]["network"],
				"netmask": packet["msg"]["netmask"],
				"peer": packet["src"]})
        #if self.relations[self.sockets[srcif]] == CUST:
        for sock in self.sockets:
            if sock == packet["src"]:
		packet_copy = copy.deepcopy(packet)
                self.forward(sock, packet_copy)
            #update all neighbors
       	    else:
            #update only customers
           	 pass
        # TODO 
        return
    
    def revoke(self, packet):
        """	handle revoke packets	"""
        rev_msg = packet["msg"]

        for each in self.networks:
            pass

            # TODO
            return True

    def dump(self, packet):
        """	handles dump table requests	"""
        return json.dumps({"src": packet["dst"],
                           "dst": packet["src"],
                           "type": "table",
                           "msg": self.fwd_table})

    def handle_packet(self, srcif, packet):
        if packet["type"] == UPDT:
            self.update(srcif, packet)
        if packet["type"] == DATA:
            pass
        if packet["type"] == DUMP:
            self.dump(packet)
        if packet["type"] == RVKE:
            self.revoke(packet)
        if packet["type"] == NRTE:
            self.send_error(srcif, "No route found")
	if packet["type"] == "wait":
	    pass

        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def map_ports(self):
        list_of_ports = []
        for index, each in enumerate(self.relations.keys(), 1):
            list_of_ports.append({index : each[:-1] + "1"})


    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                            msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
		    else:
			print(self.fwd_table)
			print("\n\n\n")
                else:
                    return
       
	print(self.fwd_table)
	return





def subnet_binary(a, b):
    a = a.split(".")
    b = b.split(".")
    new = []
    for index, each in enumerate(a):
        new.append(str(int(each) & int(b[index])))
    print(".".join(new))

if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
