#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
store = {}
ranks = {x: hex(x) for x in replica_ids}
LEADER = min(map(lambda x: hex(x), replica_ids))

while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        # handle get() and put() from clients
        if msg["leader"] != LEADER:
            return_msg = {"src": msg['dst'], "dst": LEADER, "leader": LEADER, "type": "redirect", "MID": msg['MID']}
            sock.send(json.dumps(return_msg))
            print("REDIRECT SENT")
            continue

        if msg['type'] == 'get':
            if msg['key'] in store:
                return_msg = {"src": msg['dst'], "dst": LEADER, "leader": msg['leader'], "type": "fail", "MID": msg['MID'], "value": store[msg['key']]}
            else:
                return_msg = {"src": msg['dst'], "dst": LEADER, "leader": msg['leader'], "type": "fail", "MID": msg['MID'], "value": ""}

            sock.send(json.dumps(return_msg))

        elif msg["type"] == 'put':
            store[msg["key"]] = msg['value']
            okmsg = {"src": msg['dst'], 'dst': LEADER, "leader": msg['leader'], "type": "fail", "MID": msg['MID']}
            sock.send(json.dumps(okmsg))

        # Handle noop messages. This may be removed from your final implementation
        elif msg['type'] == 'noop':
            pass
            #print('%s received a NOOP from %s' % (msg['dst'], msg['src']))

    clock = time.time()
    if clock - last > 2:
        # Send a no-op message to a random peer every two seconds, just for fun
        # You definitely want to remove this from your implementation
        msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
        sock.send(json.dumps(msg))
        #print('%s sending a NOOP to %s' % (msg['src'], msg['dst']))
        last = clock
