#!/usr/bin/env python


######################TODO LIST############################




#TODO Next we need to add in timers and election processes

#TODO Add in full message log with time series so that we can reconcile partitions

#TODO Optimize


import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
store = {}
replica_ids.append(my_id)
messageLog = {}
rollback_temp = None
quorum_cutoff = .3
heartbeat_cutoff = .3








class messageLogEntry():
    def __init__(self, timestamp, message):
        self.timestamp = timestamp
        self.listOfRepAcks = set()
        self.message = message

    def addRepAck(self, rep):
        self.listOfRepAcks.add(rep)

    def getListOfRepAck(self):
        return self.listOfRepAcks

    def getTimestamp(self):
        return self.timestamp

    def getMessage(self):
        return self.message



def initial_election():
    ranks = {x: int(x, 16) for x in replica_ids}
    min_id = min(ranks.values())

    for replica in ranks:
        if ranks[replica] == min_id:
            return replica


def election():
    print("Election called")
    return

def send_heartbeat(dst):
    to_leader = {"src": my_id, "dst": dst, "leader": LEADER_ID, "type": "heartbeat"}
    sock.send(json.dumps(to_leader))






def send_redirect(msg):
    redirect_msg = {"src": msg['dst'], "dst": msg["src"], "leader": LEADER_ID, "type": "redirect", "MID": msg['MID']}
    sock.send(json.dumps(redirect_msg))


def answer_get(msg):
    if msg['key'] in store:
        return_msg = {"src": LEADER_ID,
                      "dst": msg['src'],
                      "leader": msg['leader'],
                      "type": "ok",
                      "MID": msg['MID'],
                      "value": store[msg['key']]}
    else:
        return_msg = {"src": msg['dst'],
                      "dst": msg['src'],
                      "leader": msg['leader'],
                      "type": "fail",
                      "MID": msg['MID'],
                      "value": ""}
    sock.send(json.dumps(return_msg))


def answer_put(msg):
    # if leader, broadcast to followers
    global rollback_temp
    if msg["dst"] == LEADER_ID:
        messageLog[msg["MID"]] = messageLogEntry(time.time(), msg)
        to_followers = {"src": LEADER_ID, 'dst': "FFFF", "leader": LEADER_ID, "type": "put", "MID": msg['MID'], "origin": msg["src"], 'key': msg['key'], 'value': msg['value']}
        sock.send(json.dumps(to_followers))

    # replica answer put
    elif msg["src"] == LEADER_ID:
        # store
        if msg["key"] in store:
            rollback_temp = store[msg["key"]]

        store[msg["key"]] = msg['value']
        # If a put is received from the leader, send an ACK back to the leader
        to_leader = {"src": my_id, 'dst': LEADER_ID, "leader": LEADER_ID, "type": "ok", "MID": msg['MID'], "origin": msg["origin"], 'key': msg['key'], 'value': msg['value']}
        sock.send(json.dumps(to_leader))



def quorum_timeout(start_time):
    print(time.time() - start_time)
    return time.time() - start_time > quorum_cutoff


def quorum(mid):
    return len(mid) >= len(replica_ids) // 2


def send_rollback(msg):

    for src in messageLog[msg["MID"]].getListOfRepAck():
        rollback_msg = {"src": LEADER_ID, "dst": src, "leader": LEADER_ID, "type": "rollback", "MID": msg['MID'], "key": msg['key']}
        sock.send(json.dumps(rollback_msg))

    to_client = {"src": LEADER_ID, "dst": msg["src"], "leader": LEADER_ID, "type": "fail", "MID": msg['MID']}
    sock.send(json.dumps(to_client))

    messageLog.pop(msg["MID"])

def answer_rollback(msg):
    print("rolling back")
    if rollback_temp is not None:
        store[msg["key"]] = rollback_temp
    else:
        store.pop(msg["key"])

def quorum_reached(msg):

    to_client = {"src": LEADER_ID, 'dst': msg["origin"], "leader": LEADER_ID, "type": "ok", "MID": msg['MID']}
    sock.send(json.dumps(to_client))
    messageLog.pop(msg["MID"])
    # This needs to be changed we should only commit to the store when we know all replicas have the change
    # We need to have this become a distributed commit
    # commit_to_store(msg)
    # Can rollback via next line
    store[msg["key"]] = msg['value']


def receive_acks(msg):
    #print(quorum_timeout(start_time))
    if msg["MID"] in messageLog.keys():
        messageLog[msg["MID"]].addRepAck(msg["src"])
        if quorum(messageLog[msg['MID']].getListOfRepAck()):
            quorum_reached(msg)


#####################################################
#                   Main Function                   #
#####################################################

LEADER_ID = initial_election()
IS_LEADER = LEADER_ID == my_id
LEADER_ALIVE = True
heartbeat = time.time()

while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        # From client to leader or from replica to the leader
        if msg["dst"] == LEADER_ID:
            if msg['type'] == 'get':
                answer_get(msg)

            elif msg["type"] == 'put':
                answer_put(msg)

            elif msg["type"] == "ok":
                receive_acks(msg)

            elif msg["type"] == "heartbeat":
                send_heartbeat(msg["src"])

        # from the leader to the replicas
        elif msg['src'] == LEADER_ID:
            if msg["type"] == 'put':
                answer_put(msg)
            elif msg["type"] == 'rollback':
                answer_rollback(msg)
            elif msg["type"] == "heartbeat":
                LEADER_ALIVE = True
                heartbeat = time.time()


        # redirect
        else:
            send_redirect(msg)

        if IS_LEADER:
            for v in messageLog.values():
                if time.time() - v.getTimestamp() >= quorum_cutoff:
                    send_rollback(v.getMessage())

        else:
            if time.time() - heartbeat >= heartbeat_cutoff and LEADER_ALIVE:
                send_heartbeat(LEADER_ID)
                LEADER_ALIVE = False
                heartbeat = time.time()

            elif time.time() - heartbeat >= heartbeat_cutoff and not LEADER_ALIVE:
                election()

