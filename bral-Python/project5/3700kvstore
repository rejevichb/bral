#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0
store = {}
replica_ids.append(my_id)
messageLog = {}


def initial_election():
    ranks = {x: int(x, 16) for x in replica_ids}
    min_id = min(ranks.values())

    for replica in ranks:
        if ranks[replica] == min_id:
            return replica


def send_redirect(msg):
    redirect_msg = {"src": msg['dst'], "dst": msg["src"], "leader": LEADER_ID, "type": "redirect", "MID": msg['MID']}
    sock.send(json.dumps(redirect_msg))


def answer_get(msg):
    if msg['key'] in store:
        return_msg = {"src": LEADER_ID,
                      "dst": msg['src'],
                      "leader": msg['leader'],
                      "type": "ok",
                      "MID": msg['MID'],
                      "value": store[msg['key']]}
    else:
        return_msg = {"src": msg['dst'],
                      "dst": msg['src'],
                      "leader": msg['leader'],
                      "type": "fail",
                      "MID": msg['MID'],
                      "value": ""}
    sock.send(json.dumps(return_msg))


def answer_put(msg, messageLog):
    # Store data in store dict regardless of src address
    # This needs to be changed we should only commit to the store when we know all replicas have the change
    store[msg["key"]] = msg['value']

    # if leader, broadcast to followers
    if msg["dst"] == LEADER_ID:
        messageLog[msg["MID"]] = 1
        to_followers = {"src": LEADER_ID, 'dst': "FFFF", "leader": LEADER_ID, "type": "put", "MID": msg['MID'], "origin": msg["src"], 'key': msg['key'], 'value': msg['value']}
        sock.send(json.dumps(to_followers))

    # ADD ME BACK IN!!
    elif msg["src"] == LEADER_ID:
        # If a put is received from the leader, send an ACK back to the leader
        to_leader = {"src": my_id, 'dst': LEADER_ID, "leader": LEADER_ID, "type": "ok", "MID": msg['MID'], "origin": msg["origin"]}
        sock.send(json.dumps(to_leader))


# def wait_for_responses():
#     # Make a timeout
#     timer_start = time.time()
#     responses = {}
#
#     while time.time() - timer_start < .01:
#         ready = select.select([sock], [], [], 0.1)[0]
#         for s in ready:
#             msg_raw = s.recv(32768)
#
#             if len(msg_raw) == 0: continue
#
#             msg = json.loads(msg_raw)
#
#             if msg["src"] not in replica_ids: continue
#
#             responses[msg["src"]] = msg
#
#     #for k,v in responses.items():
#         #print("{} : {}".format(k,v))
#
#     #print("{} : {}".format(len(responses), len(replica_ids)))
#     return responses


#####################################################
#                   Main Function                   #
#####################################################

LEADER_ID = initial_election()
IS_LEADER = LEADER_ID == my_id

while True:
    ready = select.select([sock], [], [], 0.1)[0]

    if sock in ready:
        msg_raw = sock.recv(32768)

        if len(msg_raw) == 0: continue
        msg = json.loads(msg_raw)

        # handle get() and put() from clients
        # or (msg["src"] == LEADER_ID and msg["dst"] in replica_ids):
        if msg["dst"] == LEADER_ID:

            if msg['type'] == 'get':
                answer_get(msg)

            elif msg["type"] == 'put':
                answer_put(msg, messageLog)

            elif msg["type"] == "ok":
                if msg["MID"] in messageLog.keys():
                    messageLog[msg["MID"]] += 1
                    if messageLog[msg["MID"]] >= len(replica_ids)//2 + 1:
                        print("firing ok to client")
                        to_client = {"src": LEADER_ID, 'dst': msg["origin"], "leader": LEADER_ID, "type": "ok", "MID": msg['MID']}
                        sock.send(json.dumps(to_client))
                        messageLog.pop(msg["MID"])


            # Handle noop messages. This may be removed from your final implementation
            # elif msg['type'] == 'noop':
            #     okmsg = {"src": msg['dst'], 'dst': msg["src"], "leader": LEADER_ID, "type": "ok"}
            #     sock.send(json.dumps(okmsg))
            #     print('%s received a NOOP from %s' % (msg['dst'], msg['src']))

            # msg["dst"] in replica_ids and
        elif msg['src'] == LEADER_ID and msg['dst'] == 'FFFF':
            print("Message Type:")
            print(msg['type'])
            if msg["type"] == 'put':
                answer_put(msg, messageLog)


        # Need new logic here... This way we can keep track of how many acks we have gotten
        else:
            send_redirect(msg)
            continue

    # clock = time.time()
    # if clock - last > 2:
    #     # Send a no-op message to a random peer every two seconds, just for fun
    #     # You definitely want to remove this from your implementation
    #     msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
    #     sock.send(json.dumps(msg))
    #     #print('%s sending a NOOP to %s' % (msg['src'], msg['dst']))
    #     last = clock
