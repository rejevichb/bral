#!/usr/bin/python -u
#
# Project 3 Starter Code
#

# PLAN: BUILD OUT TCP RENO THEN GET RID OF SLOW START
# Because minimum and maximum bandwidth, latency, etc will be passed on the command line, we will have that information.
# Essentially, we can use it to start at a higher initial value for cwnd that allows us to be more efficient


import sys
import socket
import time
import datetime
import select
import json
import unittest
import random

# Size of each message
MSG_SIZE = 1500

# Total size of the data portion of the packet only
DATA_SIZE = 1000

# Roundtrip timeout setting
TIMEOUT = 30

# Current sequence number to be incremented
SEQUENCE = random.randint(0, (2**32) - 1)

# Contains msgs that have been read from STDIN
# as a dict where key is seq # of packet
SENDING_QUEUE = {}

# Determine if newline has been detected in loaded packets
EOF_DETECTED = False

# Used for slow start/congestion control to determine how many packets to load
# at once
CURR_WINDOW = 1

# Counts duplicate ACKs for fast retransmit
DUP_ACKS = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":") + 1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


def send_next_packet():
    global SEQUENCE
    global EOF_DETECTED

    if EOF_DETECTED:
        return

    # Although TCP needs to wait for all packets to ACK back before sending more packets, we should
    # allow for continuous sending and then reorder everything at the end
    # Keys of SENDING_QUEUE are seq # so we sort to make sure packets are sent in order
    for index, packet in enumerate(sorted(SENDING_QUEUE)):
        log("Index: {}, Packet: {}".format(index, packet))
        if index >= CURR_WINDOW or len(SENDING_QUEUE) == 0:
            break

        try:
            # sock.sendto returns length of msg sent
            # checks that msg was fully sent
            if sock.sendto(SENDING_QUEUE[packet], dest) < len(SENDING_QUEUE[packet]):

                log("[error] unable to fully send packet")
            else:
                SENDING_QUEUE.pop(packet)
                log("[send data] " + str(SEQUENCE) + " (" + str(len(SENDING_QUEUE[packet])) + ")")
        except KeyError:
            break


def setup_handshake():
    pass


def read_user_input():
    global SEQUENCE
    global SENDING_QUEUE
    global EOF_DETECTED
    global CURR_WINDOW

    # LOAD ALL PACKETS AT ONCE INTO SENDING_QUEUE
    # Load packets up to CURR_WINDOW, then increment
    # for i in range(CURR_WINDOW):
    while not EOF_DETECTED:
        # Get data for the packet
        data = sys.stdin.read(DATA_SIZE)

        if EOF_DETECTED:
            break

        if len(data) > 0:
            msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": EOF_DETECTED})
            # Add msg to queue with seq # as key
            SENDING_QUEUE[SEQUENCE] = msg
            # Safely increment SEQUENCE (handles wraparound)
            increment_seq(len(data))

        else:
            continue

        # have we reached EOF?
        if data[-2:] == "\\n":
            log("EOF Found")
            EOF_DETECTED = True

        else:
            # TODO: possibly log an error?
            return


# int -> void
# safely wraps seq # if it exceeds 32-bit value
def increment_seq(msg_size):
    global SEQUENCE

    # Uses absolute value to deal with wraparound
    if SEQUENCE + msg_size > 2**32 - 1:
        SEQUENCE = abs((2**32 - 1) - (SEQUENCE + msg_size))
    else:
        SEQUENCE += msg_size


def connection_teardown():
    pass


# float, float, float -> float
def estimate_roundtrip(old_rtt, new_sample, alpha=0.875):

    # Needed for first estimation where there is no old
    if old_rtt is None:
        old_rtt = TIMEOUT

    return alpha * old_rtt + (1 - alpha) * new_sample


# Send first packet and track time
start = time.time()
read_user_input()
send_next_packet()

# Now read in data, send packets
while True:
    #log("ABOUT TO SLEEP")

    #print(SENDING_QUEUE)
    result = sock.recvfrom(MSG_SIZE)

    if result:
        (data, addr) = result
        #log(result)
        try:
            decoded = json.loads(data)

            # If there is an ack, send next packet and reset timeout counter
            if decoded['ack'] == SEQUENCE:
                start = time.time()
                log("[recv ack] " + str(SEQUENCE))

                # Try to send next packet; break if no more data
                if not send_next_packet():
                    log("broke")
                    break
        except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")

    # If timeout has not been reached, try to send again
    elif (time.time() - start) / 1000000 < TIMEOUT:
        pass

    # If timeout has been reached, exit
    else:
        log("[error] timeout")
        sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
