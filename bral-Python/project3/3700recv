#!/usr/bin/python -u
#
# Project 3 Starter Code

# 3700recv that receives data and prints it out in-order

import sys
import socket
import datetime
import json

ADDR = None

MSG_SIZE = 1500

TIMEOUT = 1
RTT = None
ACKS_TO_SEND = set() # Dict of packets that have been received so far in format { SEQ # : DATA }

RECV_BYTES = 0 # Count of bytes received so far, to be compared against EXPECTED_TOTAL later as a completion test

SEQ_OF_FINAL = None # In case we get the packets out of order, we can know ahead of time how
# many total need to be collected

MAX_AVAIL = 10 # Highest number of acks we can send at once

NUM_PACKETS_RECEIVED = 0 # Pretty self-explanatory, could probably be removed if we used len(RECV_PACKETS)

RECV_PACKETS = {} # Dict of packets received so they can be reordered before writing to sys.stdout

def log(string):
	sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))


# float, float, float -> float
def estimate_roundtrip(old_rtt, new_sample, alpha=0.9):
	# Needed for first estimation where there is no old
	if old_rtt is None:
		old_rtt = new_sample

	updated = alpha * old_rtt + (1 - alpha) * new_sample
	log("NEW RTT IS " + str(updated))
	return updated


# Writes data to sys.stdout in sorted order
def write_data():
	for p in sorted(RECV_PACKETS):
		sys.stdout.write(RECV_PACKETS[p]['data'])

		kill = json.dumps({'ack': ['kill']})
		log(str(kill))
		sock.sendto(kill, ADDR)
		log("GOT PAST THE KILL SEND")


# Now listen for packets
while True:

	# Loop here using a while and break if timeout occurs
	# with a timeout, send batch of packets
	log("TOP OF RECV LOOP")

	# Use set (protects against duplicates) to collect ACKs from result to be sent off in bulk
	ACKS_TO_SEND = set()

	while len(ACKS_TO_SEND) < MAX_AVAIL:
		try:
			result = sock.recvfrom(MSG_SIZE)
			log("RECV reading result")
			# If nothing is ready, we hit the timeout
			if result:
				(data, addr) = result
				ADDR = addr
				try:
					decoded = json.loads(data)
					if decoded['data']:
						if len(RECV_PACKETS) > 0 and decoded['sequence'] < max(RECV_PACKETS):
							log("[recv data] " + str(decoded['sequence']) + " (" + str(
								len(decoded['data'])) + ") ACCEPTED (out-of-order)")
						else:
							log("[recv data] " + str(decoded['sequence']) + " (" + str(
								len(decoded['data'])) + ") ACCEPTED (in-order)")

						# Add to the set of ACKs to send, cache the data in our RECV_PACKETS dict, and possibly
						# Increment NUM_PACKETS_RECEIVED
						ACKS_TO_SEND.add(decoded['sequence'])
						RECV_PACKETS[decoded['sequence']] = decoded
						NUM_PACKETS_RECEIVED = len(RECV_PACKETS)

					# If we found the EOF packet, set SEQ_OF_FINAL to relevant value
					if decoded['eof']:
						SEQ_OF_FINAL = decoded['sequence']
					#break

				except (ValueError, KeyError, TypeError) as e:
					log("[recv corrupt packet]")
					raise e

		# If there was a timeout, break and send off the latest batch of ACKs
		except socket.timeout:
			log("RECV timed out")
			break

	try:
		# Send back an ack to the sender
		if len(ACKS_TO_SEND) == 0:
			log("None in ACKS TO SEND")
			continue
		msg = json.dumps({"ack": list(ACKS_TO_SEND)}) #+ len(decoded['data'])})
		log("ABOUT TO SEND " + msg)
		if sock.sendto(msg, ADDR) < len(msg):
			log("[error] unable to fully send packet")

		else:
			# If the EOF flag is set, exit
			log("SEQ OF FINAL VAL IS {} AND NUM PACKETS RECEIVED IS {}".format(SEQ_OF_FINAL, NUM_PACKETS_RECEIVED))
			if SEQ_OF_FINAL is not None and NUM_PACKETS_RECEIVED == SEQ_OF_FINAL + 1:
				log("[completed]")
				write_data()
				sys.exit(0)
		continue

	except (ValueError, KeyError, TypeError) as e:
		pass
		log("[recv corrupt packet]")
		raise e
